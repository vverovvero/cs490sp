Wendy Chen
CPSC 490 Spring 2017

---------------------------------------------------------------------
/************************* General Notes ***************************/
---------------------------------------------------------------------

This is the current unidirectional path tracer I have implemented as part of my study into path tracing theory.

Geometry obj files from:
http://people.sc.fsu.edu/~jburkardt/data/obj/obj.html

The source code for this project can be found at:
https://github.com/vverovvero/cs490sp/tree/master

Branches:
master 	(last stable release)
wip 	(developing next feature in LOG)

---------------------------------------------------------------------
/**************** Compiling & Makefile notes ***********************/
---------------------------------------------------------------------
**EDIT THIS DESCRIPTION

This path tracer was developed on MacOSX in C++.  The cairo image library needs to be installed.

If you are a Mac user, you can install cairo with the command:
brew install cairo

To compile on a different machine, you will need to have cairo correctly installed.

Using the provided makefile, simply type 'make' to generate an executable named 'main'.
To manually compile on MacOSX with clang++, the following can be entered on the command line:
clang++ -I/usr/local/include/cairo/ -L/usr/local/lib -o main main.cpp -lcairo

Currently, the scene and image output file name can be modified only manually within the source code.
Change the .h file that is loaded if you would like to change the scene file.
Change the output file name in the cairo png generation loop.

The output of this program is a .png that shows the rendered scene.

---------------------------------------------------------------------
/*********************** Shell Scripts *****************************/
---------------------------------------------------------------------
./makebin.sh [file.sce] [file.bin]
./makepng.sh [file.bin] [file.png] [res]

./makesce.sh [obj file] [txt file] [sce file]

Relies on subdirectories sce, bin, png
res can be low or high

---------------------------------------------------------------------
/*********************** Scene files *******************************/
---------------------------------------------------------------------

This path tracer accepts scene information in a two-pass workflow.
The user specifies a text file (sce file), which is parsed into a binary.
The program accepts the binary and renders the scene.

.sce -> binary 	SCEparser.py
binary -> image  main.cpp

For more complicated geometry, the general workflow is:

.obj -> .txt 	OBJparser.py
.txt -> .sce 	TXTparser.py
.sce -> binary 		SCEparser.py
binary -> image		main.cpp

OBJparser.py:
python ./OBJparser.py <input_obj_file> <output_txt_file>

OBJparser.py will take an obj file and produce a vertex array and a face array.
We assume that these obj files have been exported from Maya.  They are assumed to have been pre-processed such that the object is at the world origin (0, 0, 0) and is aligned with the ground plane to be standing up.

TXTparser.py
python ./TXTparser.py <input_txt_file> <output_sce_file>

TXTparser takes a txt file of vertex and index array.  These txt files must be products of OBJparser.py.
TXTparser generates .sce files, where the mesh consists only of TRIANGLE primitives.
No material is associated with the mesh.

SCEparser.py
python ./SCEparser.py <input_sce_file> <output_binary_file>
SCEparser.py will produce a binary file that contains structs for triangles, spheres, lights, materials, objects...
For geometry, it can handle sphere and triangle primitives.
It also handles light primitives, material primitives, and object array primitive.

.sce file specification:
Initialize primitives such as:
FILM, CAMERA, LIGHT, MATERIAL, SPHERE, TRIANGLE, INCLUDE, BOUNDINGBOX
Important: Material Indices begin at 0!  User must keep this in mind when specifying TRIANGLE or SPHERE primitives
Important: Any scene file must contain a camera
Important: INCLUDE cannot contain nested INCLUDEs
-INCLUDE only supports geometry (SPHERE, TRIANGLE)
-FILM attributes: Width(i) Height(i)
-CAMERA attributes: Point(f, f, f) LookAt(f, f, f) FOV(f) Up(f, f, f) LensRadius(f) FocalDepth(f)
-LIGHT attributes: Type(OMNI | SPOT | SPHERICAL) Point(f, f, f) Color(f, f, f)
-if Type == SPOT, additional attributes: ToPoint(f, f, f) Angle(f) FallOffAngle(f)
-if Type == SPHERICAL, additional attributes: Radius(f)
-MATERIAL attributes: Color(f, f, f) Type(ORIGINAL | PHONG | REFRACTIVE) Specular(f) Lambert(f) Ambient(f) 
-if Type == PHONG, additional attributes: Metal(bool) Exponent(f)
-if Type == REFRACTIVE, additional attributes: IndexOfRefraction(f) Reflection(f) Transmission(f)
-SPHERE attributes: Point(f, f, f) Radius(f) Matieral(i)
-TRIANGLE attributes: P1(f, f, f) P2(f, f, f) P3(f, f, f) Material(i)
-Transformations supported for SPHERE: Translate(x, y, z), ScaleR(s), RotateX(a), RotateY(a), RotateZ(a)
-Transformations supported for TRIANGLE: Translate(x, y, z), Scale(x, y, z), RotateX(a), RotateY(a), RotateZ(a)
-INCLUDE attributes: Mesh(file location) + transformations for TRIANGLE or SPHERE
-BOUNDINGBOX attributes: Min(f, f, f) Max(f, f, f)


SCENE GENERATION SAMPLE WORKFLOW:
python geometry/SCEparser.py scene1.sce scene1.bin
./main scene1.bin scene1.png

Note: REFRACTIVE material types are currently unimplemented, and program will exit if REFRACTIVE material is encountered.


---------------------------------------------------------------------
/*********************** Acceleration ******************************/
---------------------------------------------------------------------
-acceleration is based off some work done from Fall 2015

A kd-tree acceleration structure is implemented.  The KDnode and KDtree classes can be found in SCEparser.h and SCEparser.cpp.

To build the kd-tree, triangle-box accelerations must be tested for, and this adapted code is found in intersect.h and intersect.cpp, with sources cited.

In main.cpp, intersectScene is modified as intersectSceneAccel, where only a shortened list of objects is searched.

The kdtree is assembled after the scene object has been created.  The kdtree is passed as an argument alongside the scene object in the render loop.

Notes on the kdtree:
-how are split points selected
-Maximum depth is currently at 25


Split points are selected by naively dividing the box in half along its longest axis.  This method yields consistently faster results.  

Interestingly, splitting by getting the average middle point did not perform well, and was significantly (in some case, by a factof of 4) slower than naive splitting.  Why would this be?

According to some research online, the best way to build the kd-tree is by using the SAH heuristic.

-discuss intersect.cpp, SCEparser.cpp, and main.cpp functions in acceleration/intersection

---------------------------------------------------------------------
/***************** Unidirectional Path Tracing **********************/
---------------------------------------------------------------------
-see last semesters work for this (Fall 2016)


---------------------------------------------------------------------
/*********************** Depth of Field ****************************/
---------------------------------------------------------------------
-circular approximation
-if LensRadius is set to 0.0, point camera is used

---------------------------------------------------------------------
/*********************** Multithreading ****************************/
---------------------------------------------------------------------
-need to change main.cpp global var and recompile if number of threads is changed
-default number to use is 8 threads, based off number of cores on my Mac
-will allow threading for any factor of the image height

---------------------------------------------------------------------
/********************** Noise reduction ****************************/
---------------------------------------------------------------------
-lo vs hi samples per pixel
-pixel diff tolerance (variance or manhattan norm)
-gaussian filter


---------------------------------------------------------------------
/************************** Materials ******************************/
---------------------------------------------------------------------
-glass was not implemented


---------------------------------------------------------------------
/************************** Lights *********************************/
---------------------------------------------------------------------


